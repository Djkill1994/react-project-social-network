{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","className","s","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","info","onSubmit","styles","formSummaryError","createField","Input","type","TextArea","contacts","Object","keys","map","key","ProfileData","isOwner","goToEditMode","onClick","lookingJob","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","contact","ProfileInfo","savePhoto","saveProfile","Preloader","infoBlock","avatar","src","photos","large","userPhoto","alt","target","files","length","userName","fullName","initialValues","formData","then","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostReduxForm","required","MyPosts","postsElements","postsData","p","id","posts","values","addPost","newPostText","post","MyPostsMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.83d7e089.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"titlePicture\":\"ProfileInfo_titlePicture__3Egg9\",\"info\":\"ProfileInfo_info__y3pkn\",\"userName\":\"ProfileInfo_userName__2ZqDj\",\"avatar\":\"ProfileInfo_avatar__3gSxa\",\"status\":\"ProfileInfo_status__2t8RL\",\"infoBlock\":\"ProfileInfo_infoBlock__EWpeF\",\"infoDate\":\"ProfileInfo_infoDate__S70PK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__18mJh\",\"post\":\"MyPosts_post___jAnA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3arQ6\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport s from \"./ProfileInfo.module.css\"\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n\n}\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    };\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    };\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <b>Status:</b> <span onDoubleClick={activateEditMode}\n                                         className={s.status}>{props.status || \"-----\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange} value={status}/>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;\n","import s from \"./ProfileInfo.module.css\";\nimport {createField, GetStringKeys, Input, TextArea} from \"../../common/FormsControls/FormsControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport styles from \"../../common/FormsControls/FormControls.module.css\";\nimport {ProfileType} from \"../../../types/types\";\nimport React from \"react\";\n\ntype PropsType = {\n    profile: ProfileType\n}\n\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType,\n    PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\n    return <form className={s.info} onSubmit={handleSubmit}>\n        {error && <div className={styles.formSummaryError}>\n            {error}\n        </div>}\n        {<div>\n            <button>save</button>\n        </div>}\n        <div>\n            <b>Full name:</b>{createField<ProfileTypeKeys>(\"Full Name\", \"fullName\", [], Input)}\n        </div>\n        <div>\n            <b>Looking for a job</b>\n            {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\n        </div>\n        <div>\n            <b>Looking for a job description</b>\n            {createField<ProfileTypeKeys>(\"My professionals skills\", \"lookingForAJobDescription\", [], TextArea)}\n        </div>\n        <div>\n            <b>About Me:</b>\n            {createField<ProfileTypeKeys>(\"About Me\", \"aboutMe\", [], TextArea)}\n        </div>\n        <div className={s.contacts}>\n            <b>Contacts:</b>\n            <div>\n                <b>Contact</b>: {Object.keys(profile.contacts).map(key => {\n                return <div key={key}>\n                    <b> {key}: {createField(key, \"contacts.\" + key, [], Input)} </b>\n                </div>\n            })}\n            </div>\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm\n","import s from './ProfileInfo.module.css';\nimport Preloader from '../../common/Preloader/Preloader';\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from '../../../assets/Image/pngegg.png'\nimport React, {ChangeEvent, useState} from \"react\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport {ContactsType, ProfileType} from \"../../../types/types\";\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n    let [editMode, setEditMode] = useState(false)\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        saveProfile(formData).then(() => {\n            setEditMode(false)\n        })\n    }\n\n    return (\n        <div>\n            <div className={s.infoBlock}>\n                <div>\n                    <img className={s.avatar} src={profile.photos.large || userPhoto} alt={userPhoto}/>\n                    {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\n\n                    <div className={s.userName}>\n                        {profile.fullName}\n                    </div>\n\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n\n                    {editMode\n                        ? <ProfileDataForm profile={profile} initialValues={profile} onSubmit={onSubmit}/>\n                        : <ProfileData goToEditMode={() => {\n                            setEditMode(true)\n                        }}\n                                       profile={profile} isOwner={isOwner}/>}\n                </div>\n            </div>\n        </div>\n    );\n};\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return <div className={s.info}>\n        {isOwner && <div>\n            <button onClick={goToEditMode}>edit</button>\n        </div>}\n        <div className={s.lookingJob}>\n            <b>Looking for a job</b>: {profile.lookingForAJob}\n        </div>\n        <div className={s.lookingJob}>\n            <b>Looking for a job description</b>: {profile.lookingForAJobDescription}\n        </div>\n        <div>\n            <b>About Me:</b> {profile.aboutMe}\n        </div>\n        <div className={s.contacts}>\n            <div>\n                <b>Contact</b>: {Object.keys(profile.contacts).map(key => {\n                return <Contact key={key} contactTitle={key}\n                                contactValue={profile.contacts[key as keyof ContactsType]}/>\n            })}\n            </div>\n        </div>\n    </div>\n}\n\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\n\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo\n","import s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n  message: string | null\r\n  likesCount: number | null\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n                <div className={s.item}>\r\n                    <img src='https://avatarko.ru/img/kartinka/14/multfilm_Futurama_Bender_13773.jpg'/>\r\n                    {props.message}\r\n                    <div>\r\n                        <span>Like</span> {props.likesCount}\r\n                    </div>\r\n                </div>\r\n    );\r\n}\r\n\r\nexport default Post\r\n","import s from './MyPosts.module.css';\r\nimport Post from \"./Posts/Post\";\r\nimport React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { createField, GetStringKeys, TextArea } from \"../../common/FormsControls/FormsControls\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { PostType } from \"../../../types/types\";\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\ntype PropsTypePostForm = {}\r\n\r\nexport type MapPropsTypePosts = {\r\n  postsData: Array<PostType>\r\n}\r\nexport type DispatchPropsTypePosts = {\r\n  addPost: (newPostText: string) => void\r\n}\r\nexport type AddPostValuesType = {\r\n  newPostText: string\r\n}\r\n\r\nexport type AddPostFormValuesType = GetStringKeys<AddPostValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostValuesType,\r\n  PropsTypePostForm> & PropsTypePostForm> = (props) => {\r\n  return <form onSubmit={ props.handleSubmit }>\r\n    <div>\r\n      <div>\r\n        { createField<AddPostFormValuesType>('Enter Your Text', \"newPostText\", [required, maxLength10], TextArea) }\r\n      </div>\r\n      <div>\r\n        <button>Add Post</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddPostValuesType, PropsTypePostForm>({ form: 'ProfileAddNewPostRedux' })(AddPostForm);\r\n\r\nconst MyPosts: React.FC<MapPropsTypePosts & DispatchPropsTypePosts> = props => {\r\n  let postsElements = props.postsData.map(p => <Post key={ p.id } message={ p.message } likesCount={ p.likesCount }/>);\r\n\r\n  let OnAddPost = (values: AddPostValuesType) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n  return (\r\n    <div className={ s.posts }>\r\n      <h2>My posts</h2>\r\n      <AddNewPostReduxForm onSubmit={ OnAddPost }/>\r\n      <div className={ s.post }>\r\n        { postsElements }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized\r\n","import {actions} from \"../../../redux/profile-reducer\";\nimport MyPosts, {DispatchPropsTypePosts, MapPropsTypePosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        postsData: state.profilePage.postsData,\n    }\n};\n\nconst MyPostsContainer = connect<MapPropsTypePosts, DispatchPropsTypePosts, {}, AppStateType>(mapStateToProps, {\n    addPost: actions.addPostActionCreator\n})(MyPosts);\n\nexport default MyPostsContainer;\n\n\n\n\n","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport React from \"react\";\nimport {ProfileType} from \"../../types/types\";\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile: React.FC<PropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile}\n                         isOwner={props.isOwner}\n                         status={props.status}\n                         saveProfile={props.saveProfile}\n                         updateStatus={props.updateStatus}\n                         savePhoto={props.savePhoto}/>\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\nexport default Profile\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {ProfileType} from \"../../types/types\";\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\n\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n        }\n        if (!userId) {\n            this.props.history.push(\"/login\")\n        }\n        if (!userId) {\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\")\n        } else {\n            this.props.getUserProfile(userId);\n            this.props.getStatus(userId);\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Profile {...this.props}\n                         isOwner={!this.props.match.params.userId}\n                         profile={this.props.profile}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatus}\n                         savePhoto={this.props.savePhoto}/>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}), withRouter,\n)(ProfileContainer);\n"],"sourceRoot":""}