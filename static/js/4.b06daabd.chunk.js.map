{"version":3,"sources":["components/dialogs/Dialogs.module.css","components/dialogs/DialogItem/DialogItem.tsx","components/dialogs/Message/Message.tsx","components/dialogs/Dialogs.tsx","hok/withAuthRedirect.tsx","components/dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","patch","id","className","s","dialog","active","to","activeClassName","activeLink","name","Messages","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","inputMessage","createField","required","TextArea","Dialogs","state","dialogsPage","dialogsElements","dialogData","map","d","messagesElements","messageData","m","Message","dialogs","dialogsItems","messages","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"uIACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,WAAa,4BAA4B,SAAW,0BAA0B,aAAe,gC,oGCkBjNC,EAVyB,SAACC,GACrC,IAAIC,EAAQ,YAAcD,EAAME,GAEhC,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAIN,EAAOO,gBAAiBJ,IAAEK,WAAvC,SAAoDT,EAAMU,UCDvDC,EANuB,SAACX,GACnC,OACI,qBAAKG,UAAWC,IAAEQ,QAAlB,SAA4BZ,EAAMY,W,yBCApCC,EAAcC,YAAiB,IAsC/BC,EAAsBC,YAAoC,CAACC,KAAM,wBAA3CD,EAbE,SAAChB,GAC3B,OAAO,sBAAMkB,SAAUlB,EAAMmB,aAAtB,SACH,sBAAKhB,UAAWC,IAAEgB,aAAlB,UACI,8BACKC,YAA0C,kBAAmB,iBAAkB,CAACC,IAAUT,GAAcU,OAE7G,8BACI,4DAQDC,EAtCqB,SAACxB,GACjC,IAAIyB,EAAQzB,EAAM0B,YACdC,EAAkBF,EAAMG,WAAWC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAMR,GAAI4B,EAAE5B,IAAS4B,EAAE5B,OACvF6B,EAAmBN,EAAMO,YAAYH,KAAI,SAAAI,GAAC,OAAI,cAACC,EAAD,CAAUtB,QAASqB,EAAErB,aAMvE,OACI,sBAAKT,UAAWC,IAAE+B,QAAlB,UACI,qBAAKhC,UAAWC,IAAEgC,aAAlB,SACKT,IAEL,sBAAKxB,UAAWC,IAAEiC,SAAlB,UACKN,EACD,cAAChB,EAAD,CAAqBG,SAXb,SAACoB,GACjBtC,EAAMuC,YAAYD,EAAOE,0B,qCCZ3BC,EAA6B,SAAChB,GAChC,MAAO,CACHiB,OAAQjB,EAAMkB,KAAKD,S,WCOZE,sBACXC,aAPoB,SAACpB,GACrB,MAAO,CACHC,YAAaD,EAAMC,eAKhB,eAAsBoB,ODE1B,SAA+BC,GASlC,OAFqCF,YAA4DJ,EAA4B,GAAxFI,EANiC,SAAC7C,GACnE,IAAK0C,EAAwB1C,EAAxB0C,OAAWM,EAAhB,YAA6BhD,EAA7B,GACA,OAAK0C,EACE,cAACK,EAAD,eAAsBC,IADT,cAAC,IAAD,CAAUzC,GAAI,gBCN3BqC,CAGbpB","file":"static/js/4.b06daabd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2h2Fz\",\"dialogsItems\":\"Dialogs_dialogsItems__q9fK3\",\"dialog\":\"Dialogs_dialog__3Dwt8\",\"activeLink\":\"Dialogs_activeLink__3aCG8\",\"messages\":\"Dialogs_messages__1pr_c\",\"inputMessage\":\"Dialogs_inputMessage__G8uYD\"};","import s from '../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\n\ntype PropsType = {\n    id: number | null\n    name: string | null\n}\n\nconst DialogItem: React.FC<PropsType> = (props) => {\n    let patch = '/dialogs/' + props.id;\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={patch} activeClassName={s.activeLink}>{props.name}</NavLink>\n        </div>\n    );\n}\n\nexport default DialogItem\n","import s from '../Dialogs.module.css'\nimport React from \"react\";\n\ntype PropsType = {\n    message: string | null\n}\n\nconst Messages: React.FC<PropsType> = (props) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}\n\nexport default Messages\n","import s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Messages from \"./Message/Message\";\nimport React from \"react\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, TextArea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst Dialogs: React.FC<OwnProps> = (props) => {\n    let state = props.dialogsPage\n    let dialogsElements = state.dialogData.map(d => <DialogItem name={d.name} id={d.id} key={d.id}/>);\n    let messagesElements = state.messageData.map(m => <Messages message={m.message}/>);\n\n    let addNewMessage = (values: NewMessageFormValuesType) => {\n        props.sendMessage(values.newMessageBody);\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    );\n}\n\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType,\n    PropsType> & PropsType> = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div className={s.inputMessage}>\n            <div>\n                {createField<NewMessageFormValuesKeysType>('Enter Your Text', 'newMessageBody', [required, maxLength50], TextArea)}\n            </div>\n            <div>\n                <button>Send Message</button>\n            </div>\n        </div>\n    </form>\n}\n\nconst AddMessageReduxForm = reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm);\n\nexport default Dialogs\n\ntype PropsType = {}\ntype OwnProps = {\n    dialogsPage: InitialStateType\n    sendMessage: (messageText: string) => void\n}\nexport type NewMessageFormValuesType = {\n    newMessageBody: string\n}\nexport type NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\n","import {Redirect} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux-store\";\n\nconst mapStateToPropsForRedirect = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth,\n    }\n};\n\ntype MapPropsType = {\n    isAuth: boolean\n}\n\ntype DispatchPropsType = {}\n\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={\"/login\"}/>;\n        return <WrappedComponent {...restProps as WCP}/>\n    }\n\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\n\n    return ConnectedAuthRedirectComponent\n};\n","import {actions} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport React from \"react\";\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n};\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {...actions}),\n    withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}